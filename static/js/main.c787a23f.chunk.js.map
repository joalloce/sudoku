{"version":3,"sources":["components/Header.js","sudoku/sudokuSolver.js","components/Square.js","components/SudokuBoard.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","collapsed","setCollapsed","Navbar","color","light","NavbarBrand","href","className","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","SudokuSolver","this","board","type","TYPES","NORMAL","i","j","row","number","col","initRow","initCol","x","y","k","q","w","isInItsRow","isInItsCol","isInItsBox","KING","isInItsKing","KNIGHT","isInItsKnight","MIRACLE","isAConsecutiveOrhtogonallyAdjacent","n","isOkToPlace","solve","line","concat","console","log","Square","setBoard","disabled","value","setValue","valid","setValid","useEffect","maxLength","onChange","e","inputValue","parseInt","target","Number","isInteger","prev","validate","SudokuBoard","map","key","Home","sudokuSolver","toggleButton","setToggleButton","sudokuType","setSudokuType","Container","Row","Col","xs","Button","setType","Form","FormGroup","Label","style","textDecoration","Input","name","defaultChecked","id","UncontrolledTooltip","placement","About","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c787a23f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\n\r\nconst Header = () => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n  return (\r\n    <>\r\n      <Navbar color=\"faded\" light>\r\n        <NavbarBrand href=\"/\" className=\"mr-auto\">\r\n          Sudoku Solver\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/#/\">Home</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/#/about/\">About</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","// to do King, knight, miracle solver sudokus\r\n\r\nconst SIZE = 9;\r\n\r\nexport default class SudokuSolver {\r\n  static TYPES = {\r\n    NORMAL: 1,\r\n    KING: 2,\r\n    KNIGHT: 3,\r\n    MIRACLE: 4,\r\n  };\r\n\r\n  constructor() {\r\n    this.board = [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ];\r\n    this.type = SudokuSolver.TYPES.NORMAL;\r\n  }\r\n\r\n  setBoard(board) {\r\n    for (let i = 0; i < SIZE; ++i) {\r\n      for (let j = 0; j < SIZE; ++j) {\r\n        this.board[i][j] = board[i][j];\r\n      }\r\n    }\r\n  }\r\n\r\n  setType(type) {\r\n    this.type = type;\r\n  }\r\n\r\n  isInItsRow(row, number) {\r\n    for (let i = 0; i < SIZE; ++i) {\r\n      if (this.board[row][i] === number) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isInItsCol(col, number) {\r\n    for (let i = 0; i < SIZE; ++i) {\r\n      if (this.board[i][col] === number) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isInItsBox(row, col, number) {\r\n    let initRow = row - (row % 3);\r\n    let initCol = col - (col % 3);\r\n    for (let i = initRow; i < initRow + 3; ++i) {\r\n      for (let j = initCol; j < initCol + 3; ++j) {\r\n        if (this.board[i][j] === number) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isInItsKnight(row, col, number) {\r\n    let x = [-2, -1, 1, 2, 2, 1, -1, -2];\r\n    let y = [1, 2, 2, 1, -1, -2, -2, -1];\r\n    for (let k = 0; k < 8; ++k) {\r\n      let i = row + x[k];\r\n      let j = col + y[k];\r\n      if (\r\n        i >= 0 &&\r\n        j >= 0 &&\r\n        i < SIZE &&\r\n        j < SIZE &&\r\n        this.board[i][j] === number\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isInItsKing(row, col, number) {\r\n    let x = [-1, -1, 1, 1];\r\n    let y = [-1, 1, -1, 1];\r\n    for (let k = 0; k < 4; ++k) {\r\n      let i = row + x[k];\r\n      let j = col + y[k];\r\n      if (\r\n        i >= 0 &&\r\n        j >= 0 &&\r\n        i < SIZE &&\r\n        j < SIZE &&\r\n        this.board[i][j] === number\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isAConsecutiveOrhtogonallyAdjacent(row, col, number) {\r\n    let x = [-1, 0, 0, 1];\r\n    let y = [0, 1, -1, 0];\r\n    for (let k = 0; k < 4; ++k) {\r\n      let i = row + x[k];\r\n      let j = col + y[k];\r\n      let q = number - 1;\r\n      let w = number + 1;\r\n      if (i >= 0 && j >= 0 && i < SIZE && j < SIZE) {\r\n        if (q >= 1 && q <= SIZE && this.board[i][j] === q) {\r\n          return true;\r\n        }\r\n        if (w >= 1 && w <= SIZE && this.board[i][j] === w) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isOkToPlace(row, col, number) {\r\n    switch (this.type) {\r\n      case SudokuSolver.TYPES.NORMAL:\r\n        return (\r\n          !this.isInItsRow(row, number) &&\r\n          !this.isInItsCol(col, number) &&\r\n          !this.isInItsBox(row, col, number)\r\n        );\r\n      case SudokuSolver.TYPES.KING:\r\n        return (\r\n          !this.isInItsRow(row, number) &&\r\n          !this.isInItsCol(col, number) &&\r\n          !this.isInItsBox(row, col, number) &&\r\n          !this.isInItsKing(row, col, number)\r\n        );\r\n      case SudokuSolver.TYPES.KNIGHT:\r\n        return (\r\n          !this.isInItsRow(row, number) &&\r\n          !this.isInItsCol(col, number) &&\r\n          !this.isInItsBox(row, col, number) &&\r\n          !this.isInItsKnight(row, col, number)\r\n        );\r\n      case SudokuSolver.TYPES.MIRACLE:\r\n        return (\r\n          !this.isInItsRow(row, number) &&\r\n          !this.isInItsCol(col, number) &&\r\n          !this.isInItsBox(row, col, number) &&\r\n          !this.isInItsKnight(row, col, number) &&\r\n          !this.isInItsKing(row, col, number) &&\r\n          !this.isAConsecutiveOrhtogonallyAdjacent(row, col, number)\r\n        );\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  solve() {\r\n    for (let i = 0; i < SIZE; ++i) {\r\n      for (let j = 0; j < SIZE; ++j) {\r\n        if (!this.board[i][j]) {\r\n          for (let n = 1; n <= SIZE; ++n) {\r\n            if (this.isOkToPlace(i, j, n)) {\r\n              this.board[i][j] = n;\r\n              if (this.solve()) {\r\n                return true;\r\n              } else {\r\n                this.board[i][j] = 0;\r\n              }\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  display() {\r\n    let line = \"\";\r\n    for (let i = 0; i < SIZE; ++i) {\r\n      for (let j = 0; j < SIZE; ++j) {\r\n        line = line.concat(this.board[i][j], \" \");\r\n      }\r\n      console.log(line);\r\n      line = \"\";\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst Square = ({ number, setBoard, i, j, disabled }) => {\r\n  const [value, setValue] = useState(number);\r\n  const [valid, setValid] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setValid(true);\r\n    setValue(number);\r\n  }, [number]);\r\n\r\n  const validate = (e) => {\r\n    let inputValue = parseInt(e.target.value);\r\n    if (\r\n      (Number.isInteger(inputValue) && inputValue > 0 && inputValue <= 9) ||\r\n      e.target.value === \"\"\r\n    ) {\r\n      setValid(true);\r\n      if (e.target.value === \"\") {\r\n        inputValue = 0;\r\n      }\r\n      setBoard((prev) => {\r\n        prev[i][j] = inputValue;\r\n        return prev;\r\n      });\r\n    } else {\r\n      setValid(false);\r\n    }\r\n    setValue(e.target.value);\r\n  };\r\n  return (\r\n    <div className={`square ${valid ? \"\" : \"bad\"}`}>\r\n      <input\r\n        className={`inputNumber ${valid ? \"\" : \"bad\"}`}\r\n        type=\"text\"\r\n        maxLength=\"1\"\r\n        value={value ? value : \"\"}\r\n        disabled={disabled}\r\n        onChange={(e) => validate(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst SudokuBoard = ({board,setBoard,disabled}) => {\r\n  return (\r\n    <div className=\"grid\">\r\n      {board.map((line,i) => line.map((number,j)=>(<Square key={`${i}-${j}`} i={i} j={j} disabled={disabled} setBoard={setBoard} number={number}/>)))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SudokuBoard;\r\n","import React, { useState } from \"react\";\r\nimport SudokuSolver from \"../sudoku/sudokuSolver\";\r\nimport SudokuBoard from \"./SudokuBoard\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup,\r\n  UncontrolledTooltip,\r\n} from \"reactstrap\";\r\n\r\nfunction Home() {\r\n  const [board, setBoard] = useState([\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ]);\r\n  let sudokuSolver = new SudokuSolver();\r\n\r\n  const [toggleButton, setToggleButton] = useState(true);\r\n  const [sudokuType, setSudokuType] = useState(SudokuSolver.TYPES.NORMAL);\r\n\r\n  const handleSolve = () => {\r\n    setToggleButton(false);\r\n    sudokuSolver.setBoard(board);\r\n    sudokuSolver.setType(sudokuType);\r\n    sudokuSolver.solve();\r\n    setBoard(sudokuSolver.board);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setToggleButton(true);\r\n    setBoard([\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ]);\r\n  };\r\n\r\n  const handleTypeChange = (e) => {\r\n    if (e.target.value === \"normal\") {\r\n      setSudokuType(SudokuSolver.TYPES.NORMAL);\r\n    } else if (e.target.value === \"knight\") {\r\n      setSudokuType(SudokuSolver.TYPES.KNIGHT);\r\n    } else if (e.target.value === \"king\") {\r\n      setSudokuType(SudokuSolver.TYPES.KING);\r\n    } else if (e.target.value === \"miracle\") {\r\n      setSudokuType(SudokuSolver.TYPES.MIRACLE);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Container className=\"mt-3\">\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <SudokuBoard\r\n              board={board}\r\n              setBoard={setBoard}\r\n              disabled={!toggleButton}\r\n            />\r\n          </Col>\r\n          <Col xs=\"3\" className=\"mt-3\">\r\n            <Container>\r\n              <Row>\r\n                <Button\r\n                  className=\"mt-1\"\r\n                  color=\"primary\"\r\n                  disabled={!toggleButton}\r\n                  onClick={handleSolve}\r\n                >\r\n                  Solve\r\n                </Button>\r\n              </Row>\r\n              <Row>\r\n                <Button\r\n                  className=\"mt-1\"\r\n                  color=\"secondary\"\r\n                  onClick={handleReset}\r\n                >\r\n                  Reset\r\n                </Button>\r\n              </Row>\r\n              <Row className=\"mt-1\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label\r\n                      className=\"col-form-label\"\r\n                      style={{ textDecoration: \"underline\" }}\r\n                    >\r\n                      Sudoku Type:\r\n                    </Label>\r\n                    <Col onChange={handleTypeChange}>\r\n                      <FormGroup>\r\n                        <Label>\r\n                          <Input\r\n                            type=\"radio\"\r\n                            value=\"normal\"\r\n                            name=\"radio\"\r\n                            defaultChecked\r\n                          />{\" \"}\r\n                          <span id=\"tooltipNormal\">Normal</span>\r\n                        </Label>\r\n                        <UncontrolledTooltip\r\n                          placement=\"right\"\r\n                          target=\"tooltipNormal\"\r\n                        >\r\n                          Normal sudoku rules apply.\r\n                        </UncontrolledTooltip>\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label>\r\n                          <Input type=\"radio\" value=\"knight\" name=\"radio\" />{\" \"}\r\n                          <span id=\"tooltipKnight\">Knight</span>\r\n                        </Label>\r\n                        <UncontrolledTooltip\r\n                          placement=\"right\"\r\n                          target=\"tooltipKnight\"\r\n                        >\r\n                          Normal sudoku rules apply. Two cells separated by a\r\n                          knight's move cannot cointain the same digit.\r\n                        </UncontrolledTooltip>\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label>\r\n                          <Input type=\"radio\" value=\"king\" name=\"radio\" />{\" \"}\r\n                          <span id=\"tooltipKing\">King</span>\r\n                        </Label>\r\n                        <UncontrolledTooltip\r\n                          placement=\"right\"\r\n                          target=\"tooltipKing\"\r\n                        >\r\n                          Normal sudoku rules apply. Two cells separated by a\r\n                          king's move cannot cointain the same digit.\r\n                        </UncontrolledTooltip>\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label>\r\n                          <Input type=\"radio\" value=\"miracle\" name=\"radio\" />{\" \"}\r\n                          <span id=\"tooltipMiracle\">Miracle</span>\r\n                        </Label>\r\n                        <UncontrolledTooltip\r\n                          placement=\"right\"\r\n                          target=\"tooltipMiracle\"\r\n                        >\r\n                          Normal sudoku rules apply. Two cells separated by a\r\n                          king's move or a knight's move cannot cointain the\r\n                          same digit. Two orthogonally adjacent cells cannot\r\n                          contain consecutive digits.\r\n                        </UncontrolledTooltip>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </FormGroup>\r\n                </Form>\r\n              </Row>\r\n            </Container>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Container, Row } from \"reactstrap\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <>\r\n      <Container className=\"mt-3\">\r\n        <Row>\r\n          <p style={{ textDecoration: \"underline\" }}>By Jose</p>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\nimport Header from \"./components/Header\";\r\nimport Home from \"./components/Home\";\r\nimport About from \"./components/About\";\r\nfunction App() {\r\n  return (\r\n    <HashRouter basename=\"/\">\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/#/\" component={Home}></Route>\r\n        <Route exact path=\"/#/about\" component={About}></Route>\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}